env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  BASE_S3_PATH: s3://dna-autodidact-production-bucket/repos/react-basics-assessment-react-app-scaffolding_(1)-1668072851159
  CLIENT_ID: ${{ secrets.B2B_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.B2B_CLIENT_SECRET }}
  COGNITO_TOKEN_URI: ${{ secrets.COGNITO_TOKEN_URI }}
  FOLDER: vjdeloitte
  GQL_URL: ${{ secrets.GQL_URL }}
  REPO_NAME: ${{ github.event.repository.name }}
  RUN_ID: ${{ github.run_id }}
  SERVICE_NAME: react-basics-assessment-1692122127826
  USER_ID: ${{ secrets.USER_ID }}
  USER_PASS: ${{ secrets.USER_PASS }}
  project_location: asia.gcr.io
  project_path: us-gcp-ame-con-116-npd-1
jobs:
  S3-Upload:
    needs: setup-build-deploy
    outputs:
      s3path: ${{ steps.s3-upload-service.outputs.s3-path }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: s3-upload-service
      name: Artifact
      run: 'aws configure set default.region us-east-2

        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}

        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}

        rm -rf .scannerwork

        aws s3 sync . "$BASE_S3_PATH/$FOLDER/" --delete

        export S3_PATH="$BASE_S3_PATH/$FOLDER/"

        echo "::set-output name=s3-path::$S3_PATH"'
  SONAR-SCAN:
    name: sonar scan
    needs: S3-UPLOAD
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - env:
        SCANNER_REPO: .
        SQ_TOKEN: ${{ secrets.SQ_ADMIN_TOKEN }}
        SQ_URL: https://sonarqube.hashedin.com
      name: Sonar scanner
      run: 'chmod +x ./.github/actions/sonar-scanner-runner.sh

        ./.github/actions/sonar-scanner-runner.sh'
      shell: bash
  UPDATE-DB:
    env:
      DEPLOYED_URL: ${{needs.setup-build-deploy.outputs.serviceurl}}
      S3_PATH: ${{needs.S3-Upload.outputs.s3path}}
    name: update-db
    needs:
    - setup-build-deploy
    - S3-Upload
    - SONAR-SCAN
    runs-on: ubuntu-latest
    steps:
    - name: update-db-runner
      uses: actions/checkout@v2
    - run: 'chmod +x ./.github/actions/update-db-runner.sh

        ./.github/actions/update-db-runner.sh

        '
  UPDATE-DEPLOYMENT-STATUS:
    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      CLIENT_ID: ${{ secrets.B2B_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.B2B_CLIENT_SECRET }}
      COGNITO_TOKEN_URI: ${{ secrets.COGNITO_TOKEN_URI }}
      GQL_URL: ${{ secrets.GQL_URL }}
      RUN_ID: ${{ github.run_id }}
      STATUS: IN_PROGRESS
    name: update-deployment-status
    runs-on: ubuntu-latest
    steps:
    - name: update-deployment-status
      uses: actions/checkout@v2
    - run: 'chmod +x ./.github/actions/update-db-runner.sh

        ./.github/actions/update-db-runner.sh

        '
  UPDATE-FAILURE-DEPLOYMENT-STATUS:
    env:
      STATUS: FAILED
    if: ${{ failure() }}
    name: update-failure-deployment-status
    needs:
    - UPDATE-DB
    runs-on: ubuntu-latest
    steps:
    - name: update-failure-deployment-status
      uses: actions/checkout@v2
    - run: 'chmod +x ./.github/actions/update-db-runner.sh

        ./.github/actions/update-db-runner.sh

        '
  setup-build-deploy:
    name: Setup, Build, and Deploy
    needs:
    - UPDATE-DEPLOYMENT-STATUS
    outputs:
      serviceurl: ${{ steps.deploy-service.outputs.deployed-url }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - id: auth
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - name: gcloud Set up
      run: 'gcloud config set project $project_path

        '
    - name: Image
      run: docker build --build-arg BASIC_USERNAME='${{ secrets.USER_ID }}' --build-arg
        BASIC_PASSWORD='${{ secrets.USER_PASS }}' -t $project_location/$project_path/$REPO_NAME:$GITHUB_SHA
        .
    - run: 'gcloud auth configure-docker -q

        '
    - name: Build
      run: docker push $project_location/$project_path/$REPO_NAME:$GITHUB_SHA
    - id: deploy-service
      name: Deploy
      run: 'gcloud run deploy $SERVICE_NAME --region us-west2 --image $project_location/$project_path/$REPO_NAME:$GITHUB_SHA
        --max-instances 3 --memory 1000Mi --platform managed --region us-west2 --allow-unauthenticated
        --vpc-connector=hu-conn

        export Service_URL=$(gcloud run services describe $SERVICE_NAME --region us-west2
        --format ''value(status.url)'')

        echo "::set-output name=deployed-url::$Service_URL"

        '
name: Build and Deploy to Cloud Run
on:
  push:
    branches:
    - main
